/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.HospitalSystem;
import model.Patient;
import model.Person;
import static ui.CreatePanel.infoBox;

/**
 *
 * @author Animal
 */
public class ViewPanel extends javax.swing.JPanel {

   
     int highAbnormal = 140;
     int lowAbnormal = 90;
    /**
     * Creates new form ViewPanel
     */
    /*
    public ViewPanel() {
        initComponents();
    }*/
    /**
     * @param fleet
     */
//    public ViewPanel(CarFleet fleet){
//        this.fleet = fleet;
//        initComponents();
//        populateTable(fleet.getCarList());
//    }
    public ViewPanel(){
       
        initComponents();
        populateTable(HospitalSystem.PatientDirectory,HospitalSystem.PersonsDirectory);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblViewCar = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPersonView = new javax.swing.JTable();
        btnFindByName = new javax.swing.JButton();
        txtFindByName = new javax.swing.JTextField();
        lblFindByBrand = new javax.swing.JLabel();
        btnFindByAges = new javax.swing.JButton();
        lblFindSeatsLow = new javax.swing.JLabel();
        txtLowAge = new javax.swing.JTextField();
        lblFindSeatsHigh = new javax.swing.JLabel();
        txtHighAge = new javax.swing.JTextField();
        btnFindByCommunity = new javax.swing.JButton();
        lblFindBySerial = new javax.swing.JLabel();
        txtFindByCommunity = new javax.swing.JTextField();
        btnFindByHouse = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtFindByHouse = new javax.swing.JTextField();
        btnFindByCity = new javax.swing.JButton();
        lblFindByCity = new javax.swing.JLabel();
        txtFindByCity = new javax.swing.JTextField();
        btnListAll = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPatient = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        ageShow = new javax.swing.JTextField();
        communityShow = new javax.swing.JTextField();
        cityShow = new javax.swing.JTextField();
        bloodShow = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        houseShow = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblVitalSigns = new javax.swing.JTable();
        nameShow = new javax.swing.JLabel();
        delete = new javax.swing.JButton();

        lblViewCar.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        lblViewCar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblViewCar.setText("System");

        tblPersonView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Age", "Community", "City", "House", "BloodPressure"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPersonView);
        if (tblPersonView.getColumnModel().getColumnCount() > 0) {
            tblPersonView.getColumnModel().getColumn(1).setHeaderValue("Age");
            tblPersonView.getColumnModel().getColumn(2).setHeaderValue("Community");
            tblPersonView.getColumnModel().getColumn(3).setHeaderValue("City");
            tblPersonView.getColumnModel().getColumn(4).setHeaderValue("House");
            tblPersonView.getColumnModel().getColumn(5).setResizable(false);
            tblPersonView.getColumnModel().getColumn(5).setHeaderValue("BloodPressure");
        }

        btnFindByName.setText("Find By Name");
        btnFindByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindByNameActionPerformed(evt);
            }
        });

        txtFindByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFindByNameActionPerformed(evt);
            }
        });

        btnFindByAges.setText("Find by Ages");
        btnFindByAges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindByAgesActionPerformed(evt);
            }
        });

        lblFindSeatsLow.setText("From:");

        txtLowAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLowAgeActionPerformed(evt);
            }
        });

        lblFindSeatsHigh.setText("To:");

        btnFindByCommunity.setText("Find By Community");
        btnFindByCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindByCommunityActionPerformed(evt);
            }
        });

        lblFindBySerial.setText("Community:");

        txtFindByCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFindByCommunityActionPerformed(evt);
            }
        });

        btnFindByHouse.setText("Find By House");
        btnFindByHouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindByHouseActionPerformed(evt);
            }
        });

        jLabel1.setText("House:");

        btnFindByCity.setText("Find By City");
        btnFindByCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindByCityActionPerformed(evt);
            }
        });

        lblFindByCity.setText("City:");

        txtFindByCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFindByCityActionPerformed(evt);
            }
        });

        btnListAll.setText("List All");
        btnListAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListAllActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLabel2.setText("Person");

        jLabel3.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLabel3.setText("Patient");

        tblPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Age", "Community", "City", "House", "BloodPressure", "Encounters"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblPatient);
        if (tblPatient.getColumnModel().getColumnCount() > 0) {
            tblPatient.getColumnModel().getColumn(1).setHeaderValue("Age");
            tblPatient.getColumnModel().getColumn(2).setHeaderValue("Community");
            tblPatient.getColumnModel().getColumn(3).setHeaderValue("City");
            tblPatient.getColumnModel().getColumn(4).setHeaderValue("House");
            tblPatient.getColumnModel().getColumn(5).setResizable(false);
            tblPatient.getColumnModel().getColumn(5).setHeaderValue("BloodPressure");
            tblPatient.getColumnModel().getColumn(6).setHeaderValue("Encounters");
        }

        jLabel4.setText("Name");

        jLabel5.setText("Age");

        ageShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageShowActionPerformed(evt);
            }
        });

        communityShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                communityShowActionPerformed(evt);
            }
        });

        cityShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityShowActionPerformed(evt);
            }
        });

        bloodShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bloodShowActionPerformed(evt);
            }
        });

        jLabel6.setText("Community");

        jLabel7.setText("City");

        jLabel8.setText("House");

        jLabel9.setText("BloodPressure");

        houseShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                houseShowActionPerformed(evt);
            }
        });

        jButton1.setText("SAVE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tblVitalSigns.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "VitalSign"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblVitalSigns);

        nameShow.setText("Name");

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblViewCar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnFindByHouse, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnFindByName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnFindByAges, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(lblFindSeatsLow)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtLowAge, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblFindSeatsHigh)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtHighAge, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(txtFindByHouse)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblFindByBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtFindByName, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(156, 156, 156)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnFindByCity, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                                    .addComponent(btnFindByCommunity, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                                    .addComponent(btnListAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFindBySerial, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblFindByCity, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtFindByCommunity, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                            .addComponent(txtFindByCity))
                        .addGap(85, 85, 85))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(210, 210, 210)
                                        .addComponent(jLabel3)))
                                .addGap(59, 59, 59)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 638, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(ageShow)
                                .addComponent(communityShow)
                                .addComponent(cityShow)
                                .addComponent(bloodShow)
                                .addComponent(houseShow)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButton1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(delete)))
                            .addComponent(nameShow))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(lblViewCar)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnFindByName)
                            .addComponent(txtFindByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFindByBrand)
                            .addComponent(btnFindByCity)
                            .addComponent(txtFindByCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblFindByCity)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFindByAges)
                    .addComponent(lblFindSeatsLow)
                    .addComponent(txtLowAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFindSeatsHigh)
                    .addComponent(txtHighAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFindByCommunity)
                    .addComponent(lblFindBySerial)
                    .addComponent(txtFindByCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFindByHouse)
                    .addComponent(jLabel1)
                    .addComponent(txtFindByHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnListAll))
                .addGap(28, 28, 28)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(nameShow))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(ageShow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(communityShow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cityShow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(houseShow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(bloodShow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(delete))))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(87, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnFindByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindByNameActionPerformed
        // TODO add your handling code here:
        String name = txtFindByName.getText();
         if(!isValidString(name)){
              infoBox("Invalid Name data type, please check", "Invalid"); return;
         }
        
        for(Person p: HospitalSystem.PersonsDirectory){
            if(p.getName().equals(name)){
                populateTablePerson(p);
                showInformation(p);
                return;
            }
        }
         infoBox("Name not exist, please check", "Invalid"); 
  
    }//GEN-LAST:event_btnFindByNameActionPerformed

    private void txtLowAgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLowAgeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLowAgeActionPerformed

    private void btnFindByAgesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindByAgesActionPerformed
        // TODO add your handling code here:
        
        int low = -1;
        int high = -1;
        try{
            low = Integer.parseInt(txtLowAge.getText());
           high = Integer.parseInt(txtHighAge.getText());
        }catch(Exception e){
            infoBox("Invalid Age data type, please check", "Invalid");
        }
         if(low>high) {
          infoBox("Invalid Age data entry, please check", "Invalid");
          return;
         }
        
        
         List<Person> personList = new ArrayList<>();
        List<Patient> patientList = new ArrayList<>();
        
        
        for(Person p: HospitalSystem.PersonsDirectory){
            if( p.getAge() <= high && p.getAge() >= low){
                personList.add(p);
            }
        }
        
         for(Patient p: HospitalSystem.PatientDirectory){
             if( p.getAge() <= high && p.getAge() >= low){
                patientList.add(p);
            }
        } 
        
        populateTable(patientList,personList);
    }//GEN-LAST:event_btnFindByAgesActionPerformed

    private void btnFindByCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindByCommunityActionPerformed
        // TODO add your handling code here
        
          String community = txtFindByCommunity.getText();
         if(!isValid(community)){
              infoBox("Invalid Community data type, please check", "Invalid"); return;
         }
        List<Person> personList = new ArrayList<>();
        List<Patient> patientList = new ArrayList<>();
        
        for(Person p: HospitalSystem.PersonsDirectory){
            if(p.getCommunity().equals(community)){
                personList.add(p);
            }
        }
        
        for(Patient p: HospitalSystem.PatientDirectory){
            if(p.getCommunity().equals(community)){
                patientList.add(p);
            }
        } 
        populateTable(patientList,personList);
    }//GEN-LAST:event_btnFindByCommunityActionPerformed

    private void btnFindByHouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindByHouseActionPerformed
        // TODO add your handling code here:
        String house = txtFindByHouse.getText();
         if(!isValid(house)){
              infoBox("Invalid House data type, please check", "Invalid"); return;
         }
        List<Person> personList = new ArrayList<>();
        List<Patient> patientList = new ArrayList<>();
        
        for(Person p: HospitalSystem.PersonsDirectory){
            if(p.getHouse().equals(house)){
                personList.add(p);
            }
        }
        
        for(Patient p: HospitalSystem.PatientDirectory){
            if(p.getHouse().equals(house)){
                patientList.add(p);
            }
        } 
        populateTable(patientList,personList);
    }//GEN-LAST:event_btnFindByHouseActionPerformed
   
     private boolean isValid(String s){
        return s.matches("^[A-Za-z0-9]+$");
    }
     private boolean isValidString(String s){
        return s.matches("^[a-zA-Z]*$");
    }
     private boolean isValidInt(String s){
        return s.matches("^[0-9]*$");
    }
    private boolean isValidName(String s){
       for(Person p: HospitalSystem.PersonsDirectory){
            if(p.getName().equals(s)){
              return false;
            }
        }
        return true;
    }
    private void btnFindByCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindByCityActionPerformed
        // TODO add your handling code here:
        
         String city = txtFindByCity.getText();
         if(!isValid(city)){
              infoBox("Invalid City data type, please check", "Invalid"); return;
         }
        List<Person> personList = new ArrayList<>();
        List<Patient> patientList = new ArrayList<>();
        for(Person p: HospitalSystem.PersonsDirectory){
            if(p.getCity().equals(city)){
                personList.add(p);
            }
        }
        
        for(Patient p: HospitalSystem.PatientDirectory){
            if(p.getCity().equals(city)){
                patientList.add(p);
            }
        } 
        populateTable(patientList,personList);
       
    }//GEN-LAST:event_btnFindByCityActionPerformed

    private void btnListAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListAllActionPerformed
        // TODO add your handling code here:
         populateTable(HospitalSystem.PatientDirectory,HospitalSystem.PersonsDirectory);
    }//GEN-LAST:event_btnListAllActionPerformed

    private void txtFindByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFindByNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFindByNameActionPerformed

    private void ageShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ageShowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ageShowActionPerformed

    private void communityShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_communityShowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_communityShowActionPerformed

    private void cityShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityShowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cityShowActionPerformed

    private void bloodShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bloodShowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bloodShowActionPerformed

    private void houseShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_houseShowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_houseShowActionPerformed

    private void txtFindByCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFindByCommunityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFindByCommunityActionPerformed

    private void txtFindByCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFindByCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFindByCityActionPerformed

    private boolean typeCheck(){
        boolean flag = true;
        String check;
        
     
        if(!isValid(houseShow.getText())){
            houseShow.setText("");
            flag = false;
        }
        
           
        if(!isValidString(nameShow.getText())){
            nameShow.setText("");
            flag = false;
        }
        
        if(!isValidString(cityShow.getText())){
            cityShow.setText("");
            flag = false;
        }
        
        if(!isValidInt(ageShow.getText())){
            ageShow.setText("");
            flag = false;
        }
        
        if(!isValid(communityShow.getText())){
            communityShow.setText("");
            flag = false;
        }
        if(!isValidInt( bloodShow.getText())){
            bloodShow.setText("");
            flag = false;
        }
        return flag;
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(typeCheck()){
   
        int blood = Integer.valueOf(bloodShow.getText());
        Person  person =null;
         for(Person p:HospitalSystem.PersonsDirectory){
                 if(p.getName().equals(nameShow.getText())){
                     person =  p;
                 }
           }
         
        if(blood > highAbnormal || blood < lowAbnormal){
             if(person instanceof Patient){
                List<String> encouterHistory = ((Patient) person).getEncouterHistory();
                String vitalSign = UUID.randomUUID().toString().substring(0,5) +"-"+person.getName();
                encouterHistory.add(vitalSign);
                
               Patient patient = new Patient(nameShow.getText(),houseShow.getText(),cityShow.getText(),communityShow.getText(),Integer.valueOf(ageShow.getText()),blood,encouterHistory);
               person = patient;
               //改
               for(Person p:HospitalSystem.PersonsDirectory){
                 if(p.getName().equals(nameShow.getText())){
                        HospitalSystem.PersonsDirectory.remove(p);
                        HospitalSystem.PersonsDirectory.add(patient);
                 }
             }
            
             for(Person p:HospitalSystem.PatientDirectory){
                 if(p.getName().equals(nameShow.getText())){
                        HospitalSystem.PatientDirectory.remove(p);
                        HospitalSystem.PatientDirectory.add(patient);
                 }
             }
             
              }else{  
                 List<String> encouterHistory  = null;
                 try{
                   if(((Patient) person).getEncouterHistory()!=null){
                        encouterHistory =  ((Patient) person).getEncouterHistory();
                        
                  }
                 }catch(Exception e){
                         encouterHistory = new ArrayList<>();
                         String vitalSign = UUID.randomUUID().toString().substring(0,5) +"-"+person.getName();
                         encouterHistory.add(vitalSign);
                 }
       
                 Patient patient = new Patient(nameShow.getText(),houseShow.getText(),cityShow.getText(),communityShow.getText(),Integer.valueOf(ageShow.getText()),blood,encouterHistory);
                  person = patient;
                //改
               for(Person p:HospitalSystem.PersonsDirectory){
                 if(p.getName().equals(nameShow.getText())){
                        HospitalSystem.PersonsDirectory.remove(p);
                        HospitalSystem.PersonsDirectory.add(patient);
                 }
                }
               boolean flag = false;
               for(Person p:HospitalSystem.PatientDirectory){
                 if(p.getName().equals(nameShow.getText())){
                        HospitalSystem.PatientDirectory.remove(p);
                        HospitalSystem.PatientDirectory.add(patient);
                        flag = true;
                 }
                }
               
               if(!flag){
                 HospitalSystem.PatientDirectory.add(patient);
                }
                 
             }    
        }else{
            if(person instanceof Patient){
                  List<String> encouterHistory = ((Patient) person).getEncouterHistory();
//                String vitalSign = UUID.randomUUID().toString().substring(0,5) +"-"+person.getName();
//                encouterHistory.add(vitalSign);
                
               Patient patient = new Patient(nameShow.getText(),houseShow.getText(),cityShow.getText(),communityShow.getText(),Integer.valueOf(ageShow.getText()),blood,encouterHistory);
               person = patient;
               //改
               for(Person p:HospitalSystem.PersonsDirectory){
                 if(p.getName().equals(nameShow.getText())){
                        HospitalSystem.PersonsDirectory.remove(p);
                        HospitalSystem.PersonsDirectory.add(patient);
                 }
             }
            
             for(Person p:HospitalSystem.PatientDirectory){
                 if(p.getName().equals(nameShow.getText())){
                        HospitalSystem.PatientDirectory.remove(p);
                        HospitalSystem.PatientDirectory.add(patient);
                 }
             }
            }else{
             Person personNew =  new Person(nameShow.getText(),houseShow.getText(),cityShow.getText(),communityShow.getText(),Integer.valueOf(ageShow.getText()),blood);
             person = personNew;
              for(Person p:HospitalSystem.PersonsDirectory){
                 if(p.getName().equals(nameShow.getText())){
                        HospitalSystem.PersonsDirectory.remove(p);
                        HospitalSystem.PersonsDirectory.add(personNew);
                 }
             }
            }
             
        }
 
        
        infoBox("Saved successfully", "Success");
        populateTable(HospitalSystem.PatientDirectory,HospitalSystem.PersonsDirectory);
        showInformation(person);
        }else {
            infoBox("Invalid data type, please check", "Invalid");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        String name  = nameShow.getText();
       showInformation(new Person());
       
       Iterator<Patient> it = HospitalSystem.PatientDirectory.iterator();
        while (it.hasNext())
        {
            Patient p = it.next();
            if (p.getName().equals(name))
            {
                it.remove();
            }
        }

        System.out.println(name+"---2");
        
      Iterator<Person>  itPerson = HospitalSystem.PersonsDirectory.iterator();
       while (itPerson.hasNext())
        {
            Person p = itPerson.next();
            if (p.getName().equals(name))
            {
                itPerson.remove();
            }
        }
        
         System.out.println(name+"---3");
        infoBox("Delete successfully", "Success");
        
        populateTable(HospitalSystem.PatientDirectory,HospitalSystem.PersonsDirectory);
        
    }//GEN-LAST:event_deleteActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ageShow;
    private javax.swing.JTextField bloodShow;
    private javax.swing.JButton btnFindByAges;
    private javax.swing.JButton btnFindByCity;
    private javax.swing.JButton btnFindByCommunity;
    private javax.swing.JButton btnFindByHouse;
    private javax.swing.JButton btnFindByName;
    private javax.swing.JButton btnListAll;
    private javax.swing.JTextField cityShow;
    private javax.swing.JTextField communityShow;
    private javax.swing.JButton delete;
    private javax.swing.JTextField houseShow;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblFindByBrand;
    private javax.swing.JLabel lblFindByCity;
    private javax.swing.JLabel lblFindBySerial;
    private javax.swing.JLabel lblFindSeatsHigh;
    private javax.swing.JLabel lblFindSeatsLow;
    private javax.swing.JLabel lblViewCar;
    private javax.swing.JLabel nameShow;
    private javax.swing.JTable tblPatient;
    private javax.swing.JTable tblPersonView;
    private javax.swing.JTable tblVitalSigns;
    private javax.swing.JTextField txtFindByCity;
    private javax.swing.JTextField txtFindByCommunity;
    private javax.swing.JTextField txtFindByHouse;
    private javax.swing.JTextField txtFindByName;
    private javax.swing.JTextField txtHighAge;
    private javax.swing.JTextField txtLowAge;
    // End of variables declaration//GEN-END:variables

   
    
    public void populateTable(List<Patient> patientList,List<Person> personList){
        DefaultTableModel personModel = (DefaultTableModel) tblPersonView.getModel();
        DefaultTableModel patientModel = (DefaultTableModel) tblPatient.getModel();
        patientModel.setRowCount(0);
        personModel.setRowCount(0);
        
         personList.forEach(person -> {
            Object[] row = new Object[8];
           
            row[0] = person.getName();
            row[1] = person.getAge();
            row[2] = person.getCommunity();
            row[3] = person.getCity();
            row[4] = person.getHouse();
            row[5] = person.getBloodPressure();
            personModel.addRow(row);
        });
         
         patientList.forEach(patient -> {
            Object[] row = new Object[8];
            
            row[0] = patient.getName();
            row[1] = patient.getAge();
            row[2] = patient.getCommunity();
            row[3] = patient.getCity();
            row[4] = patient.getHouse();
            row[5] = patient.getBloodPressure();
            row[6] = patient.getEncouterHistory().size();
            patientModel.addRow(row);
        });
   
    }
    public void populateTablePerson(Person person){
        DefaultTableModel personModel = (DefaultTableModel) tblPersonView.getModel();
        personModel.setRowCount(0);
                if(person instanceof Patient){
                    populateTablePatient((Patient)person);         
                }
                 Object[] row = new Object[8];
               
                row[0] = person.getName();
                row[1] = person.getAge();
                row[2] = person.getCommunity();
                row[3] = person.getCity();
                row[4] = person.getHouse();
                row[5] = person.getBloodPressure();
               personModel.addRow(row); 
              
    }
    
    public void populateTablePatient(Patient person){
        DefaultTableModel patientModel = (DefaultTableModel) tblPatient.getModel();
        patientModel.setRowCount(0);
           
                Object[] row = new Object[8];
              
                row[0] = person.getName();
                row[1] = person.getAge();
                row[2] = person.getCommunity();
                row[3] = person.getCity();
                row[4] = person.getHouse();
                row[5] = person.getBloodPressure();
                row[6] = person.getEncouterHistory().size();
                patientModel.addRow(row); 
    }
    
    private void showInformation(Person person) {
             if(person!=null){
                 nameShow.setText(person.getName());
                 ageShow.setText(person.getAge()+"");    
                 communityShow.setText(person.getCommunity());        
                 cityShow.setText(person.getCity());    
                 houseShow.setText(person.getHouse());
                 bloodShow.setText(person.getBloodPressure()+"");
             }
             
             
             
             if(person instanceof Patient){
                    DefaultTableModel vitalModel = (DefaultTableModel) tblVitalSigns.getModel();
                    vitalModel.setRowCount(0);
                    Patient  p = (Patient)person;
                    List<String> encounterHistory = p.getEncouterHistory();
                    
                  encounterHistory.forEach(vital -> {
                       Object[] row = new Object[1];
                      row[0] = vital;
                     vitalModel.addRow(row);
                  });
                 
             }
    }
}
