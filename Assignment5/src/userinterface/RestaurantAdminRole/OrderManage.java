/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.RestaurantAdminRole;

import Business.DeliveryMan.DeliveryMan;
import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Order.Order;
import Business.Restaurant.Restaurant;
import Business.Restaurant.RestaurantDirectory;
import Business.Role.CustomerRole;
import Business.Role.DeliverManRole;
import Business.Role.ResAdminRole;
import Business.Role.Role.RoleType;
import Business.UserAccount.UserAccount;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.table.DefaultTableModel;
import userinterface.SystemAdminWorkArea.SystemAdminWorkAreaJPanel;



/**
 *
 * @author Animal
 */
public class OrderManage extends javax.swing.JPanel {

   
    private EcoSystem ecosystem;
   
    private RoleType roleType;
    
    private List<UserAccount> roleList ;
    
    private List<UserAccount> list;
    
     private Restaurant  ua;
    
    private JSplitPane jSplitPane1;
    /**
     * Creates new form ViewPanel
     */
    /*
 
    /**
     * @param fleet
     */


    public OrderManage(EcoSystem ecosystem,JSplitPane jSplitPane1,Restaurant ua) {
              this.ecosystem = ecosystem;

              this.ua = ua;
              
              this.jSplitPane1 = jSplitPane1;
              
              initComponents();
        
              preWork(roleType);
  
              populateOrderTable(ua);
               populateDeliverTable();
    }
    
    private void preWork(RoleType role){
        

    }
    
    public static void infoBox(String infoMessage, String titleBar)
    {
        JOptionPane.showMessageDialog(null, infoMessage, "InfoBox: " + titleBar, JOptionPane.INFORMATION_MESSAGE);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblView = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDeliverView = new javax.swing.JTable();
        btnFindId = new javax.swing.JButton();
        txtFindById = new javax.swing.JTextField();
        lblFindByBrand = new javax.swing.JLabel();
        btnListAll = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        IdShow = new javax.swing.JLabel();
        Cancel = new javax.swing.JButton();
        back = new javax.swing.JButton();
        txtRole = new javax.swing.JLabel();
        DeliverShow = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        ShowOrderList = new javax.swing.JTable();
        enterpriseLabel1 = new javax.swing.JLabel();

        lblView.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        lblView.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblView.setText("Order Manage Panel");

        tblDeliverView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Deliver", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDeliverView);

        btnFindId.setText("Find By Id");
        btnFindId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindIdActionPerformed(evt);
            }
        });

        txtFindById.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFindByIdActionPerformed(evt);
            }
        });

        btnListAll.setText("List All");
        btnListAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListAllActionPerformed(evt);
            }
        });

        jLabel4.setText("Order");

        jLabel5.setText("Deliver");

        jButton1.setText("Confirm");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        IdShow.setText("id");

        Cancel.setText("Cancel");
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelActionPerformed(evt);
            }
        });

        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        DeliverShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeliverShowActionPerformed(evt);
            }
        });

        ShowOrderList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Order Id", "Deliver", "Customer", "Items", "Price", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(ShowOrderList);

        enterpriseLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        enterpriseLabel1.setText("Handle Order");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblView, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(txtRole))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnListAll, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addComponent(btnFindId, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtFindById, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(IdShow)
                            .addComponent(DeliverShow, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Cancel))
                            .addComponent(back, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(enterpriseLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(lblFindByBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(lblView)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtRole)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(lblFindByBrand))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnFindId)
                                    .addComponent(txtFindById, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnListAll))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(90, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enterpriseLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(IdShow))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(DeliverShow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(Cancel))
                        .addGap(18, 18, 18)
                        .addComponent(back)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnFindIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindIdActionPerformed
        // TODO add your handling code here:
        String id = txtFindById.getText();
        
        if(!isValid(id)){
              infoBox("Invalid Id data type, please check", "Invalid"); return;
         } 
        
        Order order = ecosystem.getOrderDirectory().getOrderByOrderId(id, ecosystem.getOrderDirectory().getOrderList());
        if(order != null){
              populateOrderTable(order);
              showInformation(order);     
        }else{
           infoBox("Id not exist, please check", "Invalid"); return;
        }
    
    }//GEN-LAST:event_btnFindIdActionPerformed
   
     private boolean isValid(String s){
        return s.matches("^[A-Za-z0-9]+$");
    }
     private boolean isValidString(String s){
        return s.matches("^[a-zA-Z]*$");
    }
     private boolean isValidInt(String s){
        return s.matches("^[0-9]*$");
    }
    private boolean isValidDeliverName(String s){
        return ecosystem.getUserAccountDirectory().checkIfUsernameIsUnique(s);
    }
     private boolean isValidRole(String s){
         if(s.equals("admin")||s.equals("customer")||s.equals("deliver")) return true;
         return false;
    }
    private void btnListAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListAllActionPerformed
        // TODO add your handling code here:
         populateOrderTable(ua);
    }//GEN-LAST:event_btnListAllActionPerformed

    private void txtFindByIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFindByIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFindByIdActionPerformed

    private boolean typeCheck(){
        boolean flag = true;
        String check;

        if(!isValidString(DeliverShow.getText())){
            DeliverShow.setText("");
            flag = false;
        }
        
         if(!isValidDeliverName(DeliverShow.getText())){
            DeliverShow.setText("");
            flag = false;
        }
         
        return flag;
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(IdShow.getText() != "id" && isValid(DeliverShow.getText()) && !isValidDeliverName(DeliverShow.getText())){
          
            String orderId =  IdShow.getText();
            
            ecosystem.getOrderDirectory().setOrderDeliver(orderId, DeliverShow.getText(),ecosystem.getOrderDirectory().getOrderList());
            
            ecosystem.getDeliveryManDirectory().setDeliverWork(orderId, DeliverShow.getText(),ecosystem.getDeliveryManDirectory().getDeliveryManList());
            
            populateOrderTable(ua);
            populateDeliverTable();
            infoBox("Set deliver successfully", "Success");     
        }else {
            infoBox("Invalid Deliver or Id, please check", "Invalid");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelActionPerformed
        // TODO add your handling code here:
            String orderId = IdShow.getText();
            if(isValid(orderId)){
                      Order order =  ecosystem.getOrderDirectory().cancelOrder(orderId,ecosystem.getOrderDirectory().getOrderList());
           
               if(order.getDeliver()!=null){
                  ecosystem.getDeliveryManDirectory().cancelOrFinishedDrliver(order.getDeliver(),order.getOrderId(),ecosystem.getDeliveryManDirectory().getDeliveryManList());
               }
            
                populateOrderTable(ua);
                populateDeliverTable();
                 infoBox("Cancel order successfully", "Success");
            }else{
                infoBox("Id wrong!!", "invalid");
            } 
          
    }//GEN-LAST:event_CancelActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
       UserAccount user = ecosystem.getUserAccountDirectory().getUserAccountByName(ua.getName());
       AdminWorkAreaJPanel adminPanel = new AdminWorkAreaJPanel(jSplitPane1,ecosystem,user);
       jSplitPane1.setRightComponent(adminPanel);
    }//GEN-LAST:event_backActionPerformed

    private void DeliverShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeliverShowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DeliverShowActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cancel;
    private javax.swing.JTextField DeliverShow;
    private javax.swing.JLabel IdShow;
    private javax.swing.JTable ShowOrderList;
    private javax.swing.JButton back;
    private javax.swing.JButton btnFindId;
    private javax.swing.JButton btnListAll;
    private javax.swing.JLabel enterpriseLabel1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblFindByBrand;
    private javax.swing.JLabel lblView;
    private javax.swing.JTable tblDeliverView;
    private javax.swing.JTextField txtFindById;
    private javax.swing.JLabel txtRole;
    // End of variables declaration//GEN-END:variables

   
    
    public void populateOrderTable(Restaurant ua){

        DefaultTableModel orderModel = (DefaultTableModel) ShowOrderList.getModel();
     
        orderModel.setRowCount(0);
           
        List<Order> list = ecosystem.getOrderDirectory().getOrderListByRest(ua.getName(), ecosystem.getOrderDirectory().getOrderList());
         
     
          for(Order order:list){
            Object[] row = new Object[6];

            StringBuffer sb = new StringBuffer();
   
            for(String item:order.getMenu().keySet()){
                  sb.append(item+":");
                  sb.append(order.getMenu().get(item)+"  ");
            }
            
            row[0] = order.getOrderId();
            row[1] = order.getDeliver();
            row[2] = order.getRestaurant();
            row[3] = sb.toString();
            row[4] = order.getTotalPrice();
            row[5] = order.getStatus();

            orderModel.addRow(row);
         }
    }
    
    
      public void populateOrderTable(Order order){

        DefaultTableModel orderModel = (DefaultTableModel) ShowOrderList.getModel();
     
        orderModel.setRowCount(0);
           
     
            Object[] row = new Object[6];

            StringBuffer sb = new StringBuffer();
            

            for(String item:order.getMenu().keySet()){
                  sb.append(item+":");
                  sb.append(order.getMenu().get(item)+"  ");
            }
            
            row[0] = order.getOrderId();
            row[1] = order.getDeliver();
            row[2] = order.getRestaurant();
            row[3] = sb.toString();
            row[4] = order.getTotalPrice();
            row[5] = order.getStatus();

            orderModel.addRow(row);
    }
      
    public void populateDeliverTable(){

        DefaultTableModel deliverModel = (DefaultTableModel) tblDeliverView.getModel();
        deliverModel.setRowCount(0);
        
   
        
         List<DeliveryMan> list = ecosystem.getDeliveryManDirectory().getDeliveryManList();
         
          for(DeliveryMan deliver:list){
            Object[] row = new Object[2];
             
            row[0] = deliver.getName();
            row[1] = deliver.getStatus();
          
            deliverModel.addRow(row);
         }
       
    }
    
    
    private void showInformation(Order order) {
             if(order!=null){
                 IdShow.setText(order.getOrderId()); 
             }
    }

    private void populateTablePerson(UserAccount person) {
        DefaultTableModel personModel = (DefaultTableModel) tblDeliverView.getModel();
     
            personModel.setRowCount(0);
           
            Object[] row = new Object[4];
    
            row[0] = person.getUsername();
            row[1] = person.getPassword();
            row[2] = person.getRole();
            row[3] = person.getEmployee();
            
            personModel.addRow(row);
         
    }
    
}
