/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DataOperation;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Restaurant.Restaurant;
import Business.Restaurant.RestaurantDirectory;
import Business.Role.CustomerRole;
import Business.Role.DeliverManRole;
import Business.Role.ResAdminRole;
import Business.Role.Role.RoleType;
import Business.UserAccount.UserAccount;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.table.DefaultTableModel;
import userinterface.SystemAdminWorkArea.SystemAdminWorkAreaJPanel;



/**
 *
 * @author Animal
 */
public class ViewPanel extends javax.swing.JPanel {

   
    private EcoSystem ecosystem;
   
    private RoleType roleType;
    
    private List<UserAccount> roleList ;
    
    private List<UserAccount> list;
    
   
    
    private JSplitPane jSplitPane1;
    /**
     * Creates new form ViewPanel
     */
    /*
 
    /**
     * @param fleet
     */

//    public ViewPanel(EcoSystem ecosystem,RoleType role){
//        initComponents();
//        this.ecosystem = ecosystem;
//
//        this.roleType = role;
//        
//        this.roleList = ecosystem.getUserAccountDirectory().getKeyRole(roleType); //仅供当前页面方便展现使用
//        
//        this.list = ecosystem.getUserAccountDirectory().getUserAccountList();//任何修改（CRUD）都要在这里面进行
//        
//        
//        preWork(role);
//        System.out.print(roleList.size()+"进入时的size");
//        
//        populateTable(ecosystem.getUserAccountDirectory().getKeyRole(role));
//    }

    public ViewPanel(EcoSystem ecosystem, RoleType roleType,JSplitPane jSplitPane1) {
              this.ecosystem = ecosystem;

              this.roleType = roleType;
              
              this.jSplitPane1 = jSplitPane1;
              
              this.roleList = ecosystem.getUserAccountDirectory().getKeyRole(roleType); //仅供当前页面方便展现使用
        
              this.list = ecosystem.getUserAccountDirectory().getUserAccountList();//任何修改（CRUD）都要在这里面进行
              initComponents();
        
              preWork(roleType);
  
          populateTable(ecosystem.getUserAccountDirectory().getKeyRole(roleType));
    }
    
    private void preWork(RoleType role){
        
        txtRole.setText(role.getValue());
        
        lblView.setText(role.getValue() + " Information Panel");
        txtRes.setVisible(false);
        jLabelRes.setVisible(false);
        
        if(role.getValue().equals(RoleType.RestaurantAdmin.toString())){
                     txtRes.setVisible(true);
                    jLabelRes.setVisible(true);
        }
    }
    
    public static void infoBox(String infoMessage, String titleBar)
    {
        JOptionPane.showMessageDialog(null, infoMessage, "InfoBox: " + titleBar, JOptionPane.INFORMATION_MESSAGE);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblView = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPersonView = new javax.swing.JTable();
        btnFindByName = new javax.swing.JButton();
        txtFindByName = new javax.swing.JTextField();
        lblFindByBrand = new javax.swing.JLabel();
        btnListAll = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        pswShow = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        nameShow = new javax.swing.JLabel();
        delete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        txtPsw = new javax.swing.JTextField();
        back = new javax.swing.JButton();
        txtRole = new javax.swing.JLabel();
        jLabelRes = new javax.swing.JLabel();
        txtRes = new javax.swing.JTextField();

        lblView.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        lblView.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblView.setText("Information Panel");

        tblPersonView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "PassWord", "Role", "Employee"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPersonView);

        btnFindByName.setText("Find By Name");
        btnFindByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindByNameActionPerformed(evt);
            }
        });

        txtFindByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFindByNameActionPerformed(evt);
            }
        });

        btnListAll.setText("List All");
        btnListAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListAllActionPerformed(evt);
            }
        });

        jLabel4.setText("Name");

        jLabel5.setText("Password");

        pswShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pswShowActionPerformed(evt);
            }
        });

        jButton1.setText("SAVE");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        nameShow.setText("Name");

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jLabel1.setText("UserName:");

        jLabel3.setText("PassWord:");

        txtUserName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserNameActionPerformed(evt);
            }
        });

        jLabel10.setText("Role:");

        addButton.setText("ADD");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        txtPsw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPswActionPerformed(evt);
            }
        });

        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        jLabelRes.setText("Restaurant:");

        txtRes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtResActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblView, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(lblFindByBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnListAll, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(25, 25, 25)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(73, 73, 73)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabelRes)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtRes, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel1)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(24, 24, 24)
                                            .addComponent(jLabel3)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtPsw, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(64, 64, 64)
                                            .addComponent(jLabel10)))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(txtRole)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(30, 30, 30)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(pswShow)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jButton1)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(delete))
                                        .addComponent(nameShow)
                                        .addComponent(back, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnFindByName, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtFindByName, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(0, 60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(lblView)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(addButton)
                    .addComponent(txtPsw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRole))
                .addGap(9, 9, 9)
                .addComponent(lblFindByBrand)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnFindByName)
                        .addComponent(txtFindByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelRes)
                        .addComponent(txtRes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnListAll)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(nameShow))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(pswShow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(delete))
                        .addGap(74, 74, 74)
                        .addComponent(back)))
                .addContainerGap(89, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnFindByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindByNameActionPerformed
        // TODO add your handling code here:
        String name = txtFindByName.getText();
        
        if(!isValidString(name)){
              infoBox("Invalid Name data type, please check", "Invalid"); return;
         } 
        
        for(UserAccount p: list){
            if(p.getUsername().equals(name)){
                populateTablePerson(p);
                showInformation(p);
                return;
            }
        }
        
         infoBox("Name not exist, please check", "Invalid"); 
    }//GEN-LAST:event_btnFindByNameActionPerformed
   
     private boolean isValid(String s){
        return s.matches("^[A-Za-z0-9]+$");
    }
     private boolean isValidString(String s){
        return s.matches("^[a-zA-Z]*$");
    }
     private boolean isValidInt(String s){
        return s.matches("^[0-9]*$");
    }
    private boolean isValidName(String s){
      
        return ecosystem.getUserAccountDirectory().checkIfUsernameIsUnique(s);
    }
     private boolean isValidRole(String s){
         if(s.equals("admin")||s.equals("customer")||s.equals("deliver")) return true;
         return false;
    }
    private void btnListAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListAllActionPerformed
        // TODO add your handling code here:
         populateTable(ecosystem.getUserAccountDirectory().getKeyRole(roleType));
    }//GEN-LAST:event_btnListAllActionPerformed

    private void txtFindByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFindByNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFindByNameActionPerformed

    private void pswShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pswShowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pswShowActionPerformed

    private boolean typeCheck(){
        boolean flag = true;
        String check;

        if(!isValidString(txtUserName.getText())){
            txtUserName.setText("");
            flag = false;
        }
        
         if(!isValidName(txtUserName.getText())){
            txtUserName.setText("");
            flag = false;
        }
         
        return flag;
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(isValid(pswShow.getText())){
          
           for( UserAccount ua :list){
               if(ua.getUsername().equals(nameShow.getText())){                
                     ua.setPassword(pswShow.getText());               
                     break;    
               }
           }    
           
           for( UserAccount ua :roleList){
               if(ua.getUsername().equals(nameShow.getText())){                  
                     ua.setPassword(pswShow.getText());
                     showInformation(ua);
                     break;    
               }
           }
           
        populateTable(roleList);
        infoBox("Saved successfully", "Success");     
        }else {
            infoBox("Invalid password type, please check", "Invalid");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        String name = nameShow.getText();
        
          for( UserAccount ua :roleList){
              if(ua.getUsername().equals(name)){
                   
                    roleList.remove(ua); 
                    showInformation(new UserAccount());
                    break;    
              }
           }
          
         for( UserAccount ua :list){
              if(ua.getUsername().equals(name)){
                 
                    list.remove(ua);      
                    break;    
              }
           }
        populateTable(roleList);
        
        infoBox("Delete successfully", "Success");
    }//GEN-LAST:event_deleteActionPerformed

    private void txtUserNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserNameActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        if(typeCheck()){
            String name  = txtUserName.getText();
            String pwd = txtPsw.getText();
               
              if(roleType.getValue().equals(RoleType.RestaurantAdmin.toString())){
                    
                   String resta =  txtRes.getText();
                   if(resta == ""){
                      infoBox("restaurant null!!!", "invalid");
                      return; 
                   } 

                  UserAccount ua =  ecosystem.getUserAccountDirectory().createUserAccount(name, pwd,new Employee(resta),new ResAdminRole());          
                  ecosystem.getRestaurantDirectory().createRestaurantList(name,ecosystem.getRestaurantDirectory().getRestaurantList(),ua.getEmployee());
                  
                  populateTable(ecosystem.getUserAccountDirectory().getKeyRole(RoleType.RestaurantAdmin));
                  
            }else if(roleType.getValue().equals(RoleType.Customer.toString())){

                      UserAccount ua =  ecosystem.getUserAccountDirectory().createUserAccount(name, pwd, ecosystem.getEmployeeDirectory().getEmployeeList().get(0),new CustomerRole());
                      ecosystem.getCustomerDirectory().createCustomer(name,ecosystem.getCustomerDirectory().getCustomerList());
                    
                      populateTable(ecosystem.getUserAccountDirectory().getKeyRole(RoleType.Customer));
                      
            }else if(roleType.getValue().equals(RoleType.DeliveryMan.toString())){
                
                    ecosystem.getUserAccountDirectory().createUserAccount(name, pwd, ecosystem.getEmployeeDirectory().getEmployeeList().get(0),new DeliverManRole());
                    ecosystem.getDeliveryManDirectory().createDeliveryMan(name,ecosystem.getDeliveryManDirectory().getDeliveryManList());
                    
                    populateTable(ecosystem.getUserAccountDirectory().getKeyRole(RoleType.DeliveryMan));
            }
  
            
            infoBox("Information collect!", "valid");
            
            txtUserName.setText("");
            txtPsw.setText("");
        }else{
            infoBox("username exist!!!", "invalid");
        }
        
         
    }//GEN-LAST:event_addButtonActionPerformed

    private void txtPswActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPswActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPswActionPerformed

    private void txtResActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtResActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtResActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        SystemAdminWorkAreaJPanel viewPanel = new SystemAdminWorkAreaJPanel(this.jSplitPane1,ecosystem);
        
        this.jSplitPane1.setRightComponent(viewPanel);
    }//GEN-LAST:event_backActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton back;
    private javax.swing.JButton btnFindByName;
    private javax.swing.JButton btnListAll;
    private javax.swing.JButton delete;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelRes;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFindByBrand;
    private javax.swing.JLabel lblView;
    private javax.swing.JLabel nameShow;
    private javax.swing.JTextField pswShow;
    private javax.swing.JTable tblPersonView;
    private javax.swing.JTextField txtFindByName;
    private javax.swing.JTextField txtPsw;
    private javax.swing.JTextField txtRes;
    private javax.swing.JLabel txtRole;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables

   
    
    public void populateTable(List<UserAccount> list){

        DefaultTableModel personModel = (DefaultTableModel) tblPersonView.getModel();
     
        personModel.setRowCount(0);
           
         for(UserAccount person:list){
            Object[] row = new Object[4];
               
            row[0] = person.getUsername();
            row[1] = person.getPassword();
            row[2] = person.getRole();
            row[3] = person.getEmployee();
            
            personModel.addRow(row);
         }
  
    }
   

    private void showInformation(UserAccount person) {
             if(person!=null){
                 nameShow.setText(person.getUsername());
                 pswShow.setText(person.getPassword()+"");    
             }
    }

    private void populateTablePerson(UserAccount person) {
        DefaultTableModel personModel = (DefaultTableModel) tblPersonView.getModel();
     
            personModel.setRowCount(0);
           
            Object[] row = new Object[4];
    
            row[0] = person.getUsername();
            row[1] = person.getPassword();
            row[2] = person.getRole();
            row[3] = person.getEmployee();
            
            personModel.addRow(row);
         
    }
    
}
